{"version":3,"sources":["analyze.js","index.js"],"names":["analyze","squares","results","x_wins","o_wins","draws","xCount","filter","square","length","oCount","winner","calculateWinner","check_win_draw","normalize","squares_tree","children","expand_tree","count_results","node","xIsNext","i","new_squares","slice","push","total","Square","props","className","onClick","value","Board","this","renderSquare","React","Component","Game","state","history","played_move","Array","fill","stepNumber","setState","concat","step","status","current","moves","map","move","index","desc","Math","floor","jumpTo","style","analysis_results","handleClick","data","title","color","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb2681d1.chunk.js","sourcesContent":["import { calculateWinner } from './index.js';\r\n\r\nexport function analyze(squares) {\r\n    // board in squares, a 3x3 board stored in a 9-element array\r\n    // based on a given position, return the number of wins and draws\r\n    // possible for the players\r\n    let results = {x_wins: 0, o_wins: 0, draws: 0};\r\n   \r\n    // first, we can figure out whose turn it is by counting the number of X's and O's\r\n    let xCount = squares.filter(square => square === 'X').length;\r\n    let oCount = squares.filter(square => square === 'O').length;\r\n\r\n    // lets check for a win or draw first\r\n    if (check_win_draw(squares, results, xCount, oCount)) {\r\n        return normalize(results);\r\n    }\r\n\r\n    // otherwise, expand tree and collect children\r\n    let xIsNext = xCount <= oCount;\r\n    let squares_tree = {squares: squares, children: []};\r\n    expand_tree(squares_tree, xIsNext);\r\n    count_results(squares_tree, results);\r\n    return normalize(results); \r\n}\r\n\r\nfunction check_win_draw(squares, results, xCount, oCount) {\r\n    let winner = calculateWinner(squares);\r\n    if (winner === 'X') {\r\n        results['x_wins'] += 1;\r\n        return true;\r\n    } else if (winner === 'O') {\r\n        results['o_wins'] += 1;\r\n        return true;\r\n    }\r\n    if (xCount + oCount === 9) {\r\n        results['draws'] += 1;\r\n        return true;\r\n    }\r\n    return false;;\r\n}\r\n\r\nfunction expand_tree(node, xIsNext) {\r\n    // given a node, expand it to all possible children\r\n    // if xIsNext is true, then the next player is X\r\n    // if xIsNext is false, then the next player is O\r\n    let children = [];\r\n    let squares = node.squares;\r\n    // get a list of all open squares\r\n    for (let i = 0; i < squares.length; i++) {\r\n        if (squares[i] === null) {\r\n            let new_squares = squares.slice();\r\n            new_squares[i] = xIsNext ? 'X' : 'O';\r\n            children.push({squares: new_squares, children: []});\r\n        }\r\n    }\r\n    for (let i = 0; i < children.length; i++) {\r\n        expand_tree(children[i], !xIsNext);\r\n    }\r\n    node.children = children;\r\n}\r\n\r\nfunction count_results(node, results) {\r\n    // given a node, count the number of wins and draws\r\n    // if the node is a leaf node, then we have a winner\r\n    // if the node is not a leaf node, then we have a draw\r\n    if (node.children.length === 0) {\r\n        let winner = calculateWinner(node.squares);\r\n        if (winner === 'X') {\r\n            results['x_wins'] += 1;\r\n        } else if (winner === 'O') {\r\n            results['o_wins'] += 1;\r\n        } else {\r\n            results['draws'] += 1;\r\n        }\r\n    }\r\n    for (let i = 0; i < node.children.length; i++) {\r\n        count_results(node.children[i], results);\r\n    }\r\n}\r\n\r\nfunction normalize(results) {\r\n    let total = results['x_wins'] + results['o_wins'] + results['draws'];\r\n    let x_wins = results['x_wins'] / total;\r\n    let o_wins = results['o_wins'] / total;\r\n    let draws = results['draws'] / total;\r\n    return {x_wins, o_wins, draws};\r\n}\r\n","import { analyze } from './analyze';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\nimport './index.css';\r\n/*\r\nRewrite Board to use two loops to make the squares instead of hardcoding them.\r\nAdd a toggle button that lets you sort the moves in either ascending or descending order.\r\nWhen someone wins, highlight the three squares that caused the win.\r\nIncrease board size to arbitrary size.\r\nAllow option to change number of items in a row for a win.\r\nToggle computer play.\r\n*/\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                value={this.props.squares[i]}\r\n                onClick={() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        history: [{\r\n            played_move: null,\r\n            squares: Array(9).fill(null)\r\n        }],\r\n        stepNumber: 0,\r\n        xIsNext: true\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n        return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n        history: history.concat([{\r\n            played_move: i,\r\n            squares: squares\r\n        }]),\r\n        stepNumber: history.length,\r\n        xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n\r\n            const desc = move ?\r\n            'Go to move #' + move + ' - ' + indexToCoord(step.played_move) :\r\n            'Go to game start';\r\n            return (\r\n                // if (move === this.state.stepNumber) {\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>\r\n                        <span style={{\"fontWeight\":(move === this.state.stepNumber?\"bold\":\"normal\")}}>{desc}</span>\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        } else if (this.state.stepNumber === 9) {\r\n            status = 'Draw';\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        let analysis_results = analyze(current.squares, this.state.xIsNext);\r\n        //console.log(analysis_results);\r\n\r\n        return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n            <Board\r\n                squares={current.squares}\r\n                onClick={(i) => this.handleClick(i)}\r\n            />\r\n            </div>\r\n            <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n            </div>\r\n            <div>\r\n            <PieChart\r\n                data={[\r\n                    { title: 'X', value: analysis_results['x_wins'], color: '#E38627' },\r\n                    { title: 'O', value: analysis_results['o_wins'], color: '#C13C37' },\r\n                    { title: 'Draw', value: analysis_results['draws'], color: '#6A2135' },\r\n                ]}\r\n            />\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction indexToCoord(index) {\r\n    return `(${index % 3}, ${Math.floor(index / 3)})`;\r\n}\r\n  \r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\nexport function calculateWinner(squares) {\r\n    const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n    }\r\n    }\r\n    return null;\r\n}\r\n  \r\n"],"sourceRoot":""}